means
}
columnmean(airquality)
args(lm)
mean
mean()
args(mean)
mean(1:10)
search()
Sys.time()
p <- as.POSIXlt(x)
x <- Sys.time()
p <- as.POSIXlt(x)
p
unclass(p)
names(unclass(x))
names(unclass(p))
q <- as.POSIXct(x)
unclass(q)
names(unclass(q))
p$sec
p$sec
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B $d, %Y %H:%M")
x
datestring
class(x)
x
?strptime
x <- strptime(datestring, "%B/$d/%Y %H:%M")
x
x <- strptime(datestring, "%B $d, %Y %H:%M")
x
datestring
datestring <- "January 10, 2012 10:40"
datestring
x <- strptime(datestring, "%B $d, %Y %H:%M")
x
unclass(x)
class(x)
datestring <- c(""02/27/92", "02/28/92")
datestring <- c("02/27/92", "02/28/92")
x <- strptime(datestring, "%m/%d/%y")
x
x <- strptime(datestring, "%B %d, %Y %H:%M")
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
clear
clear()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
y
x
?clear()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
NA
10
x <- 5
y <- if(x < 3) {}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
s <- 3L
s
x <- 1:10
cbind(x, s)
?TEXT
?text
binom.test(0,8,p = 0.5)
binom.test(0,3,p = 0.5)
binom.test(3,3,p = 0.5)
binom.test(1,3,p = 0.5)
binom.test(1,8,p = 0.5)
binom.test(1,8,p = 1)
binom.test(0,8,p = 1)
binom.test(0,8,p = 0.5, alternative = "two.sided")
binom.test(0,8,p = 0.5, alternative = "greater")
binom.test(0,8,p = 0.5, alternative = "less")
binom.test(8,8,p = 0.5, alternative = "greater")
binom.test(8,8,p = 0.5)
binom.test(7,8,p = 0.5)
binom.test(6,8,p = 0.5)
binom.test(6,7,p = 0.5)
binom.test(3,3,p = 0.5)
binom.test(2,3,p = 0.5)
library(swirl)
swirl()
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
info()
play()
x<-TRUE & c(TRUE, FALSE, FALSE)
x
class(x)
x[1]
x[2]
next()
nxt()
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
play()
isTRUE(3)
isTRUE(NA)
nxt()
identical('twins', 'twins')
a<-array(rnorm(2*2), c(2, 2))
a
apply(a, 1, mean)
mean(-0.8456607, 0.2474761)
?mean()
mean(c(-0.8456607, 0.2474761))
mean(c(-0.8456607, -0.2613492))
a<-array(rnorm(2*2*2), c(2, 2))
a
a<-array(rnorm(2*2*2), c(2, 2, 2))
a
apply(a, 1, mean)
mean(c(-0.8482288, 1.4305271))
mean(c(-0.8482288, 1.4305271, -0.7592794, 0.22487966))
mean(c(-0.90331330, -0.3550962, 2.1571941, -0.04206032))
RowMeans(a)
?rowMeans()
roMeans(a)
rowMeans(a)
rowMeans(a, 1)
rowMeans(a, 2)
colMeans(a)
colMeans(a, 2)
colMeans(a, 1)
mean(c(-0.8482288 -0.9031330))
mean(c(-0.8482288 -0.9031330, -0.7592794, 2.1571941))
mean(c(-0.8482288, -0.9031330, -0.7592794, 2.1571941))
mean(c(-0.8482288, -0.9031330))
a
colMeans(a)
colMeans(a,0)
colMeans(a,-1)
colMeans(a, dims = 2)
colMeans(a, dims = 1)
colMeans(a, dims = 3)
rowMeans(a, dims=2)
rowMeans(a, dims=1)
colMeans(a, dims=1)
colMeans(a, dims=2)
b<-array(matrix(c(1:4), 2,2)
b
b<-array(matrix(c(1:4), 2,2))
b
?matrix()
b<-array(matrix(c(1:4), nrow=2,ncol=2))
b
b<-matrix(c(1:4), 2,2)
b
c<-matrix(5:8, 2,2)
c
array(b,c)
array(c(b,c), c(2,2,2))
c<-array(c(b,c), c(2,2,2))
c
colMeans(c)
colMeans(c,1)
colMeans(c,2)
colMeans(c,dims=2)
colSums(c)
colSums(c, dims=1)
colSums(c)
colSums(c,dims=1)
colSums(c,dims=2)
c
colMeans(c,dims=1)
colSums(c,dims=1)
rowMeans(c)
rowSums(c,dims=1)
rowSums(c)
rowSums(c,dims=1)
rowSums(c,dims=2)
rowMeans(c,dims=2)
colMeans(c,dims=2)
colMeans(c,dims=1)
rowMeans(c,dims=1)
library(swirl)
?matrix()
x<-matrix(1:10, 2,5)
x
x<-matrix(c(1:20), 4,5)
x
?repeat()
?repeat
x<-matrix(rep(1,4), 2, 2)
x
apply(x,2,sum)
x<-matrix(rep(1:2,2), 2, 2)
x
apply(x,2,sum)
apply(x,1,sum)
rowSums(x)
rowSums(x, dims=2)
x
rowSums(x,2)
rowSums(x,dims=1)
rowSums(x,dims=2)
y<-matrix(rep(1:2,2), 2, 2)
a<-array(x,y)
a
a<-array(c(x,y), 2, 2, 2)
a<-array(c(x,y), 2, 2)
a<-array(c(x,y))
a
a<-array(c(x,y), c(2,2,10))
a
a<-array(c(x,y), c(2,2,2))
a
rowSums(a,dims=1)
rowSums(a,dims=2)
apply(a,c(1,2),sum)
apply(a,1,sum)
apply(a,2,sum)
colSums(a)
colSums(a,dims=1)
colSums(a,dims=2)
?gl()
swirl
library(swirl)
swirl()
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints)
all(ints>0)
head(flags)
dim(flags)
viewinfo
viewinfo()
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vector<-sapply(flags, class)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,Unique)
unique_vals<-lapply(flags,Unique())
unique_vals<-lapply(flags,Unique)
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
Sys.Date()
mean(c(2,4,5))
source('C:/Users/Sandra/AppData/Local/Temp/Rtmp2VrUIN/boring_function.R')
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) {x<-c(8,4,0) x[1]})
evaluate(function(x) {x<-c(8,4,0)[1]})
evaluate(function(x) {c(8,4,0)[1]<-x})
evaluate(function(x) {c(8,4,0)<-x[1]})
evaluate(function(x)[1] {x<-c(3,4,0)})
info()
evaluate(function(x) {x[1]})
evaluate(function(x) {x[1]}, c(8,4,0))
evaluate(function(x) {x[3]}, c(8,4,0))
info()
evaluate(function(x) {x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("eat my shorts")
submit()
mad_libs("bend", "funny", "clown")
play()
submit
source('C:/Users/Sandra/AppData/Local/Temp/Rtmp2VrUIN/mad_libs.R')
mad_libs("bend", "funny", "clown")
nxt()
submit()
"Good" %p% "job!"
submit()
"Good" %p% "job!"
Good %p% job!
submit()
submit()
"Good"%p%"job!"
info()
'Good' %p% 'job!'
submit()
'Good' %p% 'job!'
submit()
submit()
submit()
nxt()
"I" %p% "love" %p% "R!"
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-POSIXlt(Sys.time())
t2<-POSIxlt(Sys.time())
t2<-POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
rnorm(10)
rnorm(10,1)
?rnorm()
runif()
runif(10)
x<-c(rnorm(10), runif(10), rnorm(10,1))
x
f<-gl(3,10)
split(x,f)
tapply(rnorm(10), runif(10), rnorm(10,1))
tapply(list(rnorm(10), runif(10), rnorm(10,1))
rnorm(2*2*10)
rnorm(40)
x<-c(1,1,1,2,2,2,2,3)
split(x,3)
x<-(list(matrix(1:4,2,2), matrix(5:8, 2,2))
x
x<-list(matrix(1:4,2,2), matrix(5:8, 2,2))
x
x[1]
x[[1]]
split(x,2)
split(x,1)
split(x,3)
x<-c(1,1,1,2,2,2,2,2,3,3)
x
split(x,3)
f<-gl(3,5)
split(x,f)
levels(x)
class(x)
x<-list(matrix(1:4,2,2), matrix(5:8, 2,2))
levels(x)
x<-list(matrix(1:4,2,2, dimnames = ("one", "two")), matrix(5:8, 2,2, dimnames = ("one", "two")))
x<-list(matrix(1:4,2,2, dimnames = c("one", "two")), matrix(5:8, 2,2, dimnames = c("one", "two")))
x<-list(matrix(1:4,2,2, dimnames = list("one", "two")), matrix(5:8, 2,2, dimnames = list("one", "two")))
x<-list(matrix(1:4,2,2, dimnames = list("one", "two", "three", "four")), matrix(5:8, 2,2, dimnames = list("one", "two", "three", "four")))
x<-list(matrix(1:4,2,2, dimnames = list("one", "two")), matrix(5:8, 2,2, dimnames = list("one", "two")))
x<-list(matrix(1:4,2,2, dimnames = list(c("one", "two")), matrix(5:8, 2,2, dimnames = list(c("one", "two")))
x
x<-list(matrix(1:4,2,2, dimnames = list(c("one", "two")), matrix(5:8, 2,2, dimnames = list(c("one", "two"))))
x<-list(matrix(1:4,2,2, dimnames = list(c("one", "two"))), matrix(5:8, 2,2, dimnames = list(c("one", "two"))))
x
f<-gl(3,10)
f
class(f)
z<-c(1,1,1,2,2,2,3,3,3)
class(z)
x<-rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
x
split(x, list(f1,f2))
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
sapply(flags, class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, )
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
function() x
x
x<-c(1,2,3,4)
x
x = matrix()
x
get <- function() x
x
library(datasets)
data("iris")
?iris
x<-"iris"
x
x<-iris
x
apply(iris, iris$Species, mean(iris$Sepal.Length))
apply(iris, iris$Species, mean(iris$Sepal.Length))
apply(iris, iris$Species, mean["Sepal.Length"]
)
head(iris)
head(iris[,"Sepal.Length"])
head(iris$Species)
head(iris$Sepal.Length)
apply(iris, iris$Species, mean(iris$Sepal.Length))
mean(iris$Sepal.Length)
tapply(iris, iris$Species, mean(iris$Sepal.Length))
lapply(iris, iris$Species, mean(iris$Sepal.Length))
mean(iris)
mean(iris$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars$mpg, mtcars$cyl)
head(mtcars)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
apply(mtcars,2,mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?with
with(mtcars)
with(mtcars, mean(mpg))
tapply(mtcars$hp, mtcars$cyl, mean)
class(tapply(mtcars$hp, mtcars$cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1]
tapply(mtcars$hp, mtcars$cyl, mean)[3-1]
tapply(mtcars$hp, mtcars$cyl, mean)[3]-[1]
x<-tapply(mtcars$hp, mtcars$cyl, mean)[3]
y<-tapply(mtcars$hp, mtcars$cyl, mean)[1]
x-y
debug(ls)
ls
ls()
source('~/UW/Research Berg Lab/Courses/Coursera/Data Science/2-R/Week 3/ProgrammingAssignment2/cachematrix.R')
Q
exit
exit
quit
View(flag_colors)
setwd("~/UW/Research Berg Lab/Courses/Coursera/Data Science/2-R/Week 3/ProgrammingAssignment2")
